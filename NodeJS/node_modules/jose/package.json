{
  "_from": "jose",
  "_id": "jose@1.22.2",
  "_inBundle": false,
  "_integrity": "sha512-68lTHWBsI7ERgJlv1fcTNIsFGsjoEXBXNSgmRlsr1wX7ZGuGjY9F/c/iue7ryINmHyI00tIKxlVn4UGNSH5mtA==",
  "_location": "/jose",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "jose",
    "fetchSpec": "latest",
    "name": "jose",
    "raw": "jose",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/jose/-/jose-1.22.2.tgz",
  "_shasum": "2d590a0644e776b9933cdbad2461264658da3e9e",
  "_spec": "jose",
  "_where": "/home/thehappyirishamerican/conor-first-js-application/NodeJS",
  "author": {
    "email": "panva.ip@gmail.com",
    "name": "Filip Skokan"
  },
  "ava": {
    "babel": false,
    "compileEnhancements": false,
    "files": [
      "test/**/*.test.js"
    ]
  },
  "bugs": {
    "url": "https://github.com/panva/jose/issues"
  },
  "bundleDependencies": false,
  "commitlint": {
    "extends": [
      "@commitlint/config-conventional"
    ]
  },
  "dependencies": {
    "asn1.js": "^5.3.0"
  },
  "deprecated": false,
  "description": "JSON Web Almost Everything - JWA, JWS, JWE, JWK, JWT, JWKS for Node.js with minimal dependencies",
  "devDependencies": {
    "@commitlint/cli": "^8.3.4",
    "@commitlint/config-conventional": "^8.3.4",
    "ava": "^2.4.0",
    "babel-eslint": "^10.0.3",
    "c8": "^7.0.0",
    "dtslint": "^2.0.5",
    "husky": "^4.0.0",
    "standard": "^14.3.1"
  },
  "engines": {
    "node": ">=10.13.0"
  },
  "files": [
    "LICENSE_THIRD_PARTY",
    "lib",
    "types/index.d.ts"
  ],
  "funding": "https://github.com/sponsors/panva",
  "homepage": "https://github.com/panva/jose",
  "husky": {
    "hooks": {
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
    }
  },
  "keywords": [
    "access token",
    "access_token",
    "compact",
    "decode",
    "decrypt",
    "detached",
    "ec",
    "ecdsa",
    "eddsa",
    "electron",
    "encrypt",
    "flattened",
    "general",
    "id token",
    "id_token",
    "jose",
    "json web token",
    "jsonwebtoken",
    "jwa",
    "jwe",
    "jwk",
    "jwks",
    "jws",
    "jwt",
    "logout token",
    "logout_token",
    "oct",
    "okp",
    "payload",
    "rsa",
    "secp256k1",
    "sign",
    "signature",
    "validate",
    "verify"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "jose",
  "optionalDependencies": {},
  "readme": "# jose\n\n> \"JSON Web Almost Everything\" - JWA, JWS, JWE, JWT, JWK, JWKS for Node.js with minimal dependencies\n\n<p align=\"center\"><img src=\"/img/demo.gif?raw=true\"/></p>\n\n## Implemented specs & features\n\nThe following specifications are implemented by `jose`\n\n- JSON Web Signature (JWS) - [RFC7515][spec-jws]\n- JSON Web Encryption (JWE) - [RFC7516][spec-jwe]\n- JSON Web Key (JWK) - [RFC7517][spec-jwk]\n- JSON Web Algorithms (JWA) - [RFC7518][spec-jwa]\n- JSON Web Token (JWT) - [RFC7519][spec-jwt]\n- JSON Web Key Thumbprint - [RFC7638][spec-thumbprint]\n- JWS Unencoded Payload Option - [RFC7797][spec-b64]\n- CFRG Elliptic Curve ECDH and Signatures - [RFC8037][spec-okp]\n- secp256k1 EC Key curve support - [JOSE Registrations for WebAuthn Algorithms][draft-secp256k1]\n\nThe test suite utilizes examples defined in [RFC7520][spec-cookbook] to confirm its JOSE\nimplementation is correct.\n\nAvailable JWT validation profiles\n\n- Generic JWT\n- OIDC ID Token (`id_token`) - [OpenID Connect Core 1.0][spec-oidc-id_token]\n- OAuth 2.0 JWT Access Tokens (`at+JWT`) - [JWT Profile for OAuth 2.0 Access Tokens][draft-ietf-oauth-access-token-jwt]\n- OIDC Logout Token (`logout_token`) - [OpenID Connect Back-Channel Logout 1.0][spec-oidc-logout_token]\n\n<br>\n\nHave a question about using `jose`? - [ask][ask].  \nFound a bug? - [report it][bug].  \nMissing a feature? - If it wasn't already discussed before, [ask for it][suggest-feature].  \nFound a vulnerability? - Reach out to us via email first, see [security vulnerability disclosure][security-vulnerability].  \n\n## Sponsor\n\n[<img width=\"65\" height=\"65\" align=\"left\" src=\"https://avatars.githubusercontent.com/u/2824157?s=75&v=4\" alt=\"auth0-logo\">][sponsor-auth0] If you want to quickly add secure token-based authentication to Node.js projects, feel free to check Auth0â€™s free plan at [auth0.com/overview][sponsor-auth0].<br><br>\n\n## Support\n\nIf you or your business use `jose`, please consider becoming a [sponsor][support-sponsor] so I can continue maintaining it and adding new features carefree.\n\n## Documentation\n\n- [jose API Documentation][documentation]\n  - [JWK (JSON Web Key)][documentation-jwk]\n  - [JWKS (JSON Web Key Set)][documentation-jwks]\n  - [JWT (JSON Web Token)][documentation-jwt]\n  - [JWS (JSON Web Signature)][documentation-jws]\n  - [JWE (JSON Web Encryption)][documentation-jwe]\n\n## Usage\n\nFor the best performance Node.js version **>=12.0.0** is recommended, but **^10.13.0** lts/dubnium\nis also supported.\n\nInstalling `jose`\n\n```console\nnpm install jose\n```\n\nUsage\n```js\nconst jose = require('jose')\nconst {\n  JWE,   // JSON Web Encryption (JWE)\n  JWK,   // JSON Web Key (JWK)\n  JWKS,  // JSON Web Key Set (JWKS)\n  JWS,   // JSON Web Signature (JWS)\n  JWT,   // JSON Web Token (JWT)\n  errors // errors utilized by jose\n} = jose\n```\n\n#### Keys and KeyStores\n\nPrepare your Keys and KeyStores. See the [documentation][documentation-jwk] for more.\n\n```js\nconst key = jose.JWK.asKey(fs.readFileSync('path/to/key/file'))\n\nconst jwk = { kty: 'EC',\n  kid: 'dl4M_fcI7XoFCsQ22PYrQBkuxZ2pDcbDimcdFmmXM98',\n  crv: 'P-256',\n  x: 'v37avifcL-xgh8cy6IFzcINqqmFLc2JF20XUpn4Y2uQ',\n  y: 'QTwy27XgP7ZMOdGOSopAHB-FU1JMQn3J9GEWGtUXreQ' }\nconst anotherKey = jose.JWK.asKey(jwk)\n\nconst keystore = new jose.JWKS.KeyStore(key, anotherKey)\n```\n\n### JWT vs JWS\n\nThe JWT module provides IANA registered claim type and format validations on top of JWS as well as\nconvenience options for verifying UNIX timestamps, setting maximum allowed JWT age, verifying\naudiences, and more.\n\nThe JWS module on the other hand handles the other JWS Serialization Syntaxes with all their\nadditional available features and allows signing of any payload, i.e. not just serialized JSON\nobjects.\n\n#### JWT Signing\n\nSign with a private or symmetric key with plethora of convenience options. See the\n[documentation][documentation-jwt] for more.\n\n```js\njose.JWT.sign(\n  { 'urn:example:claim': 'foo' },\n  privateKey,\n  {\n    algorithm: 'PS256',\n    audience: 'urn:example:client_id',\n    expiresIn: '1 hour',\n    header: {\n      typ: 'JWT'\n    },\n    issuer: 'https://op.example.com'\n  }\n)\n```\n\n#### JWT Verifying\n\nVerify with a public or symmetric key with plethora of convenience options. See the\n[documentation][documentation-jwt] for more.\n\n```js\njose.JWT.verify(\n  'eyJ0eXAiOiJKV1QiLCJhbGciOiJQUzI1NiIsImtpZCI6IjRQQXBsVkJIN0toS1ZqN0xob0RFM0VVQnNGc0hvaTRhSmxBZGstM3JuME0ifQ.eyJ1cm46ZXhhbXBsZTpjbGFpbSI6ImZvbyIsImF1ZCI6InVybjpleGFtcGxlOmNsaWVudF9pZCIsImlzcyI6Imh0dHBzOi8vb3AuZXhhbXBsZS5jb20iLCJpYXQiOjE1NTEyOTI2MjksImV4cCI6MTU1MTI5NjIyOX0.nE5fgRL8gvlStf_wB4mJ0TSXVmhJRnUVQuZ0ts6a1nWnnk0Rv69bEJ12BoMdpyPrGa_W6dxU4HFj89F4pQwW0kqBK2-TZ_n9lq-iqupj46w_lpKOfPC3clVc7ZmqYF81bEA-nX93cSKqVV-qPNPEFenb8XHKszYhBFu_uiRg9rXj2qXVU7PXGJAGTzhVgVxB-3XDB1bQ_6KiDCwzVPftrHxEYLydRCaHzggDg6sAFUhQqhPguKuE2gs6jVUh_gIL2RXeoLoinx6gZ72rfovaOmud-yzNIUN8Tvo0pqBmx0s_lEhTlfrQCzN7hZNmV1eG0GDDE-S_CfZhPePnVJZoRA',\n  publicKey,\n  {\n    issuer: 'https://op.example.com',\n    audience: 'urn:example:client_id',\n    algorithms: ['PS256']\n  }\n)\n```\n\n<details>\n  <summary><em><strong>Verifying OIDC ID Tokens</strong></em> (Click to expand)</summary><br>\n\n#### ID Token Verifying\n\nID Token is a JWT, but profiled, there are additional requirements to a JWT to be accepted as an\nID Token and it is pretty easy to omit some, use the `profile` option of `JWT.verify` or the\n`JWT.IdToken.verify` shorthand to make sure what you're accepting is really an ID Token meant to\nyour Client. This will then perform all doable validations given the input. See the\n[documentation][documentation-jwt] for more.\n\n```js\njose.JWT.IdToken.verify(\n  'eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6InIxTGtiQm8zOTI1UmIyWkZGckt5VTNNVmV4OVQyODE3S3gwdmJpNmlfS2MifQ.eyJzdWIiOiJmb28iLCJub25jZSI6ImE1MWNjZjA4ZjRiYmIwNmU4ODcxNWRkYzRiYmI0MWQ4IiwiYXVkIjoidXJuOmV4YW1wbGU6Y2xpZW50X2lkIiwiZXhwIjoxNTYzODg4ODMwLCJpYXQiOjE1NjM4ODUyMzAsImlzcyI6Imh0dHBzOi8vb3AuZXhhbXBsZS5jb20ifQ.RKCZczgICF5G9XdNDSwe4dolGauQHptpFKPzahA2wYGG2HKrKhyC8ZzqpeVc8cbntuqFBgABJVv6_9YICRx_dgwPYydTpZfZYjHnxrdWF9QsIPEGs672mrnhqIXUnXoseZ0TF6GOq6P7Qbf6gk1ru7TAbr_ieyJnNWcJhh5iHpz1k3mFz0TyTh7UNXshtQXftPUipqz4OBni5r9UaZXHw8B3QYOnms8__GJ3owOxaqkr1jgRs_EWqMlBNjPaj7ElVaeBWljDKuoK673tH0heSpgzUmUX_W8IDUVqs33uglpZwAQC7cAA5mGEg2odcRpvpP5M-WaP4RE9dl9jzcYmrw',\n  keyOrStore,\n  {\n    issuer: 'https://op.example.com',\n    audience: 'urn:example:client_id',\n    nonce: 'a51ccf08f4bbb06e88715ddc4bbb41d8',\n    algorithms: ['PS256']\n  }\n)\n```\n\nNote: Depending on the channel you receive an ID Token from the following claims may be required\nand must also be checked: `at_hash`, `c_hash` or `s_hash`. Use e.g. [`oidc-token-hash`][oidc-token-hash]\nto validate those hashes after getting the ID Token payload and signature validated by `jose`\n\n</details>\n\n<details>\n  <summary><em><strong>Verifying OAuth 2.0 JWT Access Tokens</strong></em> (Click to expand)</summary><br>\n\n#### JWT Access Token Verifying\n\nWhen accepting a JWT-formatted OAuth 2.0 Access Token there are additional requirements for the JWT\nto be accepted as an Access Token according to the [specification][draft-ietf-oauth-access-token-jwt]\nand it is pretty easy to omit some. Use the `profile` option of `JWT.verify` or the\n`JWT.AccessToken.verify` shorthand to make sure what you're accepting is really a JWT Access Token\nmeant for your Resource Server. This will then perform all doable validations given the input. See\nthe [documentation][documentation-jwt] for more.\n\n```js\njose.JWT.AccessToken.verify(\n  'eyJhbGciOiJQUzI1NiIsInR5cCI6ImF0K0pXVCIsImtpZCI6InIxTGtiQm8zOTI1UmIyWkZGckt5VTNNVmV4OVQyODE3S3gwdmJpNmlfS2MifQ.eyJzdWIiOiJmb28iLCJjbGllbnRfaWQiOiJ1cm46ZXhhbXBsZTpjbGllbnRfaWQiLCJhdWQiOiJ1cm46ZXhhbXBsZTpyZXNvdXJjZS1zZXJ2ZXIiLCJleHAiOjE1NjM4ODg4MzAsImlzcyI6Imh0dHBzOi8vb3AuZXhhbXBsZS5jb20iLCJzY29wZSI6ImFwaTpyZWFkIn0.UYy8vEGWS0cS24giCYobMMy9-bqI45p807yV1l-2WXX2J4UO-eohV_R58LE2oM88gl414c6XydO6QSYXul5roNPoOs41jpEvreQIP-HmegjbWGutktWJKfvoOblE5FjYwjrwStjLQGUzkq6KWcnDLPGmpFy7n6gZ4LF8YVz4dLEaO335hMNVNrmSPSXYqr7bAWybnLVpLxjDYwNfCO1g0_TlFx8fHh2OftHoOOmJFltFwb8JypkSB-JXVVSEh43IOEjeeMJIG_ylWIOxfLLi5Q7vPWgub83ZTkuGNe4KmlQJKIsH5k0yZSshsLYUOOH0RiXqQ-SA4Ubh3Fowigdu-g',\n  keyOrStore,\n  {\n    issuer: 'https://op.example.com',\n    audience: 'urn:example:resource-server',\n    algorithms: ['PS256']\n  }\n)\n```\n\n</details>\n\n<details>\n  <summary><em><strong>Verifying OIDC Logout Token</strong></em> (Click to expand)</summary><br>\n\n#### Logout Token Verifying\n\nLogout Token is a JWT, but profiled, there are additional requirements to a JWT to be accepted as an\nLogout Token and it is pretty easy to omit some, use the `profile` option of `JWT.verify` or the\n`JWT.LogoutToken.verify` to make sure what you're accepting is really an Logout Token meant to your\nClient. This will then perform all doable validations given the input. See the\n[documentation][documentation-jwt] for more.\n\n```js\njose.JWT.LogoutToken.verify(\n  'eyJhbGciOiJQUzI1NiJ9.eyJzdWIiOiJmb28iLCJhdWQiOiJ1cm46ZXhhbXBsZTpjbGllbnRfaWQiLCJpYXQiOjE1NjM4ODg4MzAsImp0aSI6ImhqazMyN2RzYSIsImlzcyI6Imh0dHBzOi8vb3AuZXhhbXBsZS5jb20iLCJldmVudHMiOnsiaHR0cDovL3NjaGVtYXMub3BlbmlkLm5ldC9ldmVudC9iYWNrY2hhbm5lbC1sb2dvdXQiOnt9fX0.SBi7uNUvjHL9TFoFzautGgTQ1MjyeGUNYHL7inpgq3XgTv6xc9EAKuPRtpixmhdNhmInGwUvAeqDSJxomwv1KK1cTndrC9zAMZ7h657BGQAwGhu7nTm41fWMpKQdiLa9sqp3yit5_FNBmqUNeOoMPrYT_Vl9ytsoNO89MUQy2aqCd-Z7BrNJZH0QycdW6dmYlrmZL7w3t3TaAXoJDJ4Hgl2Itkkkb6_6gO-VoPIdVD8sDuf1zQzGhIkmcFrk0fXczVYOkeF2hNYBuvsM8LuO-EPA3oyE2In9djai3M7yceTQetRa1vwlqWkg_xmYS59ry-6wT44aN7-Y6p0TdXm-Zg',\n  keyOrStore,\n  {\n    issuer: 'https://op.example.com',\n    audience: 'urn:example:client_id',\n    algorithms: ['PS256']\n  }\n)\n```\n\n</details>\n\n#### JWS Signing\n\nSign with a private or symmetric key using compact serialization. See the\n[documentation][documentation-jws] for more.\n\n```js\njose.JWS.sign(\n  { sub: 'johndoe' },\n  privateKey,\n  { kid: privateKey.kid }\n)\n```\n\n#### JWS Verifying\n\nVerify with a public or symmetric key. See the [documentation][documentation-jws] for more.\n\n```js\njose.JWS.verify(\n  'eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJqb2huZG9lIn0.T_SYLQV3A5_kFDDVNuoadoURSEtuSOR-dG2CMmrP-ULK9xbIf2vYeiHOkvTrnqGlWEGBGxYtsP1VkXmNsi1uOw',\n  publicKey\n)\n```\n\n#### JWE Encrypting\n\nEncrypt using the recipient's public key or a shared symmetrical secret. See the\n[documentation][documentation-jwe] for more.\n\n```js\njose.JWE.encrypt(\n  'eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJqb2huZG9lIn0.T_SYLQV3A5_kFDDVNuoadoURSEtuSOR-dG2CMmrP-ULK9xbIf2vYeiHOkvTrnqGlWEGBGxYtsP1VkXmNsi1uOw',\n  publicKey,\n  { kid: publicKey.kid }\n)\n```\n\n#### JWE Decrypting\n\nDecrypt using the private key or a shared symmetrical secret. See the\n[documentation][documentation-jwe] for more.\n\n```js\njose.JWE.decrypt(\n  'eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiRUNESC1FUyIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IkVsUGhsN1ljTVZsWkhHM0daSkRoOVJhemNYYlN2VFNheUF6aTBINFFtRUEiLCJ5IjoiM0hDREJTRy12emd6cGtLWmJqMU05UzVuUEJrTDBBdFM4U29ORUxMWE1SayJ9fQ..FhmidRo0twvFA7jcfKFNJw.o112vgiG_qUL1JR5WHpsErcxxgaK_FAa7vCWJ--WulndLpdwdRXHd9k3aL_k8K67xoAThrt10d7dSY2TlPpHdYkw979u0V-C4TNrpzNkv5jpBjU6hHyKpoGZfEsiTD1ivHaFy3ZLCTS69kN_eVKsZGLVf_dkq6Sz6bWE4-ln_fuwukPyMvjTyaTreLjPLBZW.ocKwptCm4Zn437L5hWFnHg',\n  privateKey\n)\n```\n\n## Detailed Support Matrix\n\n| JWK Key Types | Supported | `kty` value | `crv` values |\n| -- | -- | -- | -- |\n| RSA | âœ“ | RSA ||\n| Elliptic Curve | âœ“ | EC | P-256, secp256k1<sup>[1]</sup>, P-384, P-521 |\n| Octet Key Pair | âœ“ | OKP | Ed25519, Ed448<sup>[1]</sup>, X25519<sup>[1]</sup>, X448<sup>[1]</sup> |\n| Octet sequence | âœ“ | oct ||\n\n| Serialization | JWS Sign | JWS Verify | JWE Encrypt | JWE Decrypt |\n| -- | -- | -- | -- | -- |\n| Compact | âœ“ | âœ“ | âœ“ | âœ“ |\n| General JSON | âœ“ | âœ“ | âœ“ | âœ“ |\n| Flattened JSON  | âœ“ | âœ“ | âœ“ | âœ“ |\n\n| JWS Algorithms | Supported ||\n| -- | -- | -- |\n| RSASSA-PKCS1-v1_5 | âœ“ | RS256, RS384, RS512 |\n| RSASSA-PSS | âœ“ | PS256, PS384, PS512 |\n| ECDSA | âœ“ | ES256, ES256K<sup>[1]</sup>, ES384, ES512 |\n| Edwards-curve DSA | âœ“ | EdDSA |\n| HMAC with SHA-2 | âœ“ | HS256, HS384, HS512 |\n| Unsecured JWS | âœ“ | none<sup>[2]</sup> |\n\n| JWE Key Management Algorithms | Supported ||\n| -- | -- | -- |\n| AES | âœ“ | A128KW<sup>[1]</sup>, A192KW<sup>[1]</sup>, A256KW<sup>[1]</sup> |\n| AES GCM | âœ“ | A128GCMKW, A192GCMKW, A256GCMKW |\n| Direct Key Agreement | âœ“ | dir |\n| RSAES OAEP | âœ“ | RSA-OAEP, RSA-OAEP-256<sup>[3]</sup> |\n| RSAES-PKCS1-v1_5 | âœ“ | RSA1_5 |\n| PBES2 | âœ“ | PBES2-HS256+A128KW<sup>[1]</sup>, PBES2-HS384+A192KW<sup>[1]</sup>, PBES2-HS512+A256KW<sup>[1]</sup> |\n| ECDH-ES (for all EC keys) | âœ“ | ECDH-ES, ECDH-ES+A128KW<sup>[1]</sup>, ECDH-ES+A192KW<sup>[1]</sup>, ECDH-ES+A256KW<sup>[1]</sup> |\n| ECDH-ES (for OKP X25519) | âœ“ <sup>via [plugin][plugin-x25519]</sup> | ECDH-ES, ECDH-ES+A128KW, ECDH-ES+A192KW, ECDH-ES+A256KW |\n| ECDH-ES (for OKP X448) | âœ• ||\n| (X)ChaCha | âœ“ <sup>via [plugin][plugin-chacha]</sup> | C20PKW, XC20PKW, ECDH-ES+C20PKW, ECDH-ES+XC20PKW |\n\n| JWE Content Encryption Algorithms | Supported ||\n| -- | -- | -- |\n| AES GCM | âœ“ | A128GCM, A192GCM, A256GCM |\n| AES_CBC_HMAC_SHA2 | âœ“ |  A128CBC-HS256, A192CBC-HS384, A256CBC-HS512 |\n| (X)ChaCha | âœ“ <sup>via [plugin][plugin-chacha]</sup> | C20P, XC20P |\n\n| JWT profile validation | Supported | profile option value |\n| -- | -- | -- |\n| ID Token - [OpenID Connect Core 1.0][spec-oidc-id_token] | âœ“ | `id_token` |\n| JWT Access Tokens [JWT Profile for OAuth 2.0 Access Tokens][draft-ietf-oauth-access-token-jwt] | âœ“ | `at+JWT` |\n| Logout Token - [OpenID Connect Back-Channel Logout 1.0][spec-oidc-logout_token] | âœ“ | `logout_token` |\n| JARM - [JWT Secured Authorization Response Mode for OAuth 2.0][draft-jarm] | â—¯ ||\n\nLegend:\n- **âœ“** Implemented\n- **âœ•** Missing node crypto support / won't implement\n- **â—¯** TBD\n\n<sup>1</sup> Not supported in Electron due to Electron's use of BoringSSL  \n<sup>2</sup> Unsecured JWS is [supported][documentation-none] for the JWS and JWT sign and verify\noperations but it is an entirely opt-in behaviour, downgrade attacks are prevented by the required\nuse of a special `JWK.Key`-like object that cannot be instantiated through the key import API  \n<sup>3</sup> RSA-OAEP-256 is only supported when Node.js >= 12.9.0 runtime is detected\n\n## FAQ\n\n#### Semver?\n\n**Yes.** Everything that's either exported in the TypeScript definitions file or\n[documented][documentation] is subject to\n[Semantic Versioning 2.0.0](https://semver.org/spec/v2.0.0.html). The rest is to be considered\nprivate API and is subject to change between any versions.\n\n#### How do I use it outside of Node.js\n\nIt is **only built for >=10.13.0 Node.js** environment - including `jose` in transpiled\nbrowser-environment targeted projects is not supported and may result in unexpected results.\n\n#### How is it different from [`jws`](https://github.com/brianloveswords/node-jws), [`jwa`](https://github.com/brianloveswords/node-jwa) or [`jsonwebtoken`](https://github.com/auth0/node-jsonwebtoken)?\n\n- it supports JWK Key Format for all four key types (oct, RSA, EC and OKP)\n- it is providing Key and KeyStore abstractions\n- there is JSON Web Encryption support\n- it supports all JWS / JWE Serialization Syntaxes\n- it supports the \"crit\" member validations to make sure extensions are handled correctly\n- it is not only validating the signatures, it is making sure the JWE/JWS is syntactically correct,\n  e.g. not having duplicated header parameters between protected/unprotected or per-recipient\n  headers\n\n#### How is it different from [`node-jose`][node-jose]\n\n`node-jose` is built to work in any javascript runtime, to be able to do that it packs a lot of\nbackfill and javascript implementation code in the form of\n[`node-forge`](https://github.com/digitalbazaar/forge), this significantly increases the footprint\nof the module with dependencies that either aren't ever used or have native implementation available\nin Node.js already, those are often times faster and more reliable.\n\n#### What is the ultimate goal?\n\n- **No dependencies**, the moment JWK formatted keys are supported by node's `crypto` the direct\ndependency count will go down from 1 to 0. ðŸš€\n- Just the API one needs, having used other jose modules for 3+ years I only include what's useful\n\n#### Why? Just, why?\n\nI was using [`node-jose`][node-jose] for\n[`openid-client`](https://github.com/panva/node-openid-client) and\n[`oidc-provider`](https://github.com/panva/node-oidc-provider) and came to realize its shortcomings\nin terms of performance and API (not having well defined errors).\n\n&plus; this was an amazing opportunity to learn JOSE as a whole\n\n[ask]: https://github.com/panva/jose/issues/new?labels=question&template=question.md&title=question%3A+\n[bug]: https://github.com/panva/jose/issues/new?labels=bug&template=bug-report.md&title=bug%3A+\n[documentation-jwe]: /docs/README.md#jwe-json-web-encryption\n[documentation-jwk]: /docs/README.md#jwk-json-web-key\n[documentation-jwks]: /docs/README.md#jwks-json-web-key-set\n[documentation-jws]: /docs/README.md#jws-json-web-signature\n[documentation-jwt]: /docs/README.md#jwt-json-web-token\n[documentation-none]: /docs/README.md#jwknone\n[documentation]: /docs/README.md\n[node-jose]: https://github.com/cisco/node-jose\n[security-vulnerability]: https://github.com/panva/jose/issues/new?template=security-vulnerability.md\n[spec-b64]: https://tools.ietf.org/html/rfc7797\n[spec-cookbook]: https://tools.ietf.org/html/rfc7520\n[spec-jwa]: https://tools.ietf.org/html/rfc7518\n[spec-jwe]: https://tools.ietf.org/html/rfc7516\n[spec-jwk]: https://tools.ietf.org/html/rfc7517\n[spec-jws]: https://tools.ietf.org/html/rfc7515\n[spec-jwt]: https://tools.ietf.org/html/rfc7519\n[spec-okp]: https://tools.ietf.org/html/rfc8037\n[draft-secp256k1]: https://tools.ietf.org/html/draft-ietf-cose-webauthn-algorithms-04\n[draft-ietf-oauth-access-token-jwt]: https://tools.ietf.org/html/draft-ietf-oauth-access-token-jwt\n[draft-jarm]: https://openid.net/specs/openid-financial-api-jarm.html\n[spec-thumbprint]: https://tools.ietf.org/html/rfc7638\n[spec-oidc-id_token]: https://openid.net/specs/openid-connect-core-1_0.html#IDToken\n[spec-oidc-logout_token]: https://openid.net/specs/openid-connect-backchannel-1_0.html#LogoutToken\n[oidc-token-hash]: https://www.npmjs.com/package/oidc-token-hash\n[suggest-feature]: https://github.com/panva/jose/issues/new?labels=enhancement&template=feature-request.md&title=proposal%3A+\n[support-sponsor]: https://github.com/sponsors/panva\n[sponsor-auth0]: https://auth0.com/overview?utm_source=GHsponsor&utm_medium=GHsponsor&utm_campaign=panva-jose&utm_content=auth\n[plugin-x25519]: https://github.com/panva/jose-x25519-ecdh\n[plugin-chacha]: https://github.com/panva/jose-chacha\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/panva/jose.git"
  },
  "scripts": {
    "coverage": "c8 ava",
    "lint": "standard && dtslint types",
    "lint-fix": "standard --fix",
    "test": "ava",
    "watch": "ava --watch"
  },
  "standard": {
    "parser": "babel-eslint"
  },
  "types": "types/index.d.ts",
  "version": "1.22.2"
}
